Låt grafen med elever vara G och den ena uppgiften x och den andra y


def different_assignments(G):
	v = godtyckligt hörn
	L = ['Fungerar']
	DFS(G,v,x,L)
	return L[0]


def DFS(G, v, former_assignment, L)
	if v already visited:
		if former_assignment == v.assignment:
			L[0] = 'Fungerar ej'
			return
		else:
			return
	
	mark v as visited
	if former_assignment == x:
		v.assignment = y
	else:
		v.assignment = x

	for all neighbors x of v:
		DFS(G, x, v.assignment, L)
	

Tidskomplexiteten för different_assignments kommer avgöras av DFS då resterande operationer i different_assignments är O(1). Tidskomplexiteten för DFS kommer bli precis som vanligt då jag inte lagt till några operationer inne i DFS av högre ordning. Dvs. vi kan använda det rekursiva anropet till DFS som en elementär operation vilket ger tidskomplexiteten O(V+E) där V är antalet hörn och E mängden kanter eftersom man från varje hörn kan travesera en närhetslista för att komma till hörnets grannar. Eftersom grafen inte är riktad kommer det totala antalet element i denna lista vara 2E vilket ger tidskomplexiteten O(V + 2E) vilket ungefär är O(V+E). 
